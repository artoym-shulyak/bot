const { Composer, Markup, Extra } = require('telegraf')
const bot = new Composer()
const User = require('../../models/user.model.js')
const Clan = require('../../models/clan.model.js')
const throttle = require('../../utils/throttle.js')

// –û–±–º–µ–Ω –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã
const swappingResources = async (ctx) => {
	try {
		const uuid = String(ctx[0].from.id) // ID user
		const data = ctx[0].match[0] // Information btn
		if (data.indexOf(uuid) === -1) return // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—É–∂–æ–∫–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
		let swap = ctx[3]

	 switch (ctx[3]) {
	  case '–∫–∞—Ä—Ç—ã':
				await User.findOne({ uuid }).then(async user => {		
					if (user.resources.crio < ctx[1]) {
						await ctx[0].reply(ctx[0].i18n.t('fatal_swap'))
					} else {
						await User.updateOne(
							{ uuid },
							{
								$inc: {
									'resources.crio': -ctx[1],
									'resources.recrute': ctx[2],
									'quest.fifth.countCompleted': 1,
								}
							}
						)
							await ctx[0].reply(
								`‚úÖ –û–±–º–µ–Ω: ${ctx[1]} üßä ‚û† ${ctx[2]} üÉè –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!`
							)
					}
				})
				ctx[0].answerCbQuery('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –æ–±–º–µ–Ω  ', { cache_time: 3 })
	  	break
	  case '—Å–∞–º–æ—Ü–≤–µ—Ç—ã':
				await User.findOne({ uuid }).then(async user => {		
					if (user.resources.crio < ctx[1]) {
						await ctx[0].reply(ctx[0].i18n.t('fatal_swap'))
					} else {
						await User.updateOne(
							{ uuid },
							{
								$inc: {
									'resources.crio': -ctx[1],
									'resources.gems': ctx[2],
									'quest.fifth.countCompleted': 1,
								}
							}
						)
							await ctx[0].reply(
								`‚úÖ –û–±–º–µ–Ω: ${ctx[1]} üßä ‚û† ${ctx[2]} üíé –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!`
							)
					}
				})
				ctx[0].answerCbQuery('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –æ–±–º–µ–Ω  ', { cache_time: 3 })
	  	break
	  case '–º–æ–Ω–µ—Ç—ã':
				await Clan.findOne({ 'leader.uuid': uuid }).then(async clan => {
					if (clan === null) return
					if (clan.leader.uuid !== uuid) return

					if (clan.money < ctx[1]) {
						await ctx[0].reply(ctx[0].i18n.t('fatal_swap_clan'))
					} else {
						await Clan.updateOne(
							{ 'leader.uuid': uuid },
							{ $inc: { "money": -ctx[1] } }
						).then(async () => {
							for (let i = 0; i < clan.benchEmployees.length; i++) {
								await User.updateOne({"uuid": clan.benchEmployees[i]}, {$inc: { 'resources.crio': ctx[2] }})
							}
			    await ctx[0].reply(
								`‚úÖ –û–±–º–µ–Ω: ${ctx[1]} ü™ô ‚û† ${ctx[2]} üßä –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!`
							)
						})
					}

				})

				ctx[0].answerCbQuery('ü™ô ‚û† üßä', { cache_time: 3 })
	  	break
	  case '–º–µ—Å—Ç–æ':
				await Clan.findOne({ 'leader.uuid': uuid }).then(async clan => {
					if (clan.leader.uuid !== uuid) return
					if (clan.money < ctx[1]) {
						await ctx[0].reply(ctx[0].i18n.t('fatal_swap_clan'))
					} else {
						await Clan.updateOne(
							{ 'leader.uuid': uuid },
							{ $inc: { "money": -ctx[1], "structure": ctx[2] } }
						).then(async () => {
							await ctx[0].reply(
								`‚úÖ –û–±–º–µ–Ω: ${ctx[1]} ü™ô ‚û† + ${ctx[2]} üë§ –º–µ—Å—Ç–æ –≤ –∫–ª–∞–Ω–µ!`
							)
						})
					}
				})
				ctx[0].answerCbQuery('ü™ô ‚û† +1 üë§', { cache_time: 3 })
	  	break
	  default:
	  	console.log('This swap doesn"t not exist.')
	 }
	} catch (e) {
		console.error(e)
	}
}

// –û–±–º–µ–Ω –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
const swappingAccessories = async (ctx) => {
	try {
		const uuid = ctx[0].from.id // ID user
		const data = ctx[0].match[0] // Information btn
		if (data.indexOf(uuid) === -1) return // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—É–∂–æ–∫–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É

		switch (ctx[2]) {
		  case 'first':
						await User.findOne({ uuid }).then(async user => {
							if (user.resources.crio < ctx[1]) {
								await ctx[0].reply(ctx[0].i18n.t('fatal_swap'))
							} else {
								if (user.resources.amulets.first) {
									await ctx[0].reply('–°—É—á–æ–Ω–æ–∫ ü™¨ —É–∂–µ –≤ –Ω–∞–ª–∏—á–∏–∏ ‚úÖ')
								} else {
									await User.updateOne(
										{ uuid },
										{
											$inc: {
												'resources.crio': -ctx[1],
												'stats.bm': ctx[3],
												'stats.hp': ctx[4],
											},
											$set: { 'resources.amulets.first': true },
										}
									).then(res => console.log(res))
										await ctx[0].reply(
											`‚úÖ –û–±–º–µ–Ω: ${ctx[1]} üßä ‚û† –°—É—á–æ–Ω–æ–∫ ü™¨ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!`
										)
								}
							}
						})
						ctx[0].answerCbQuery('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –æ–±–º–µ–Ω  ', { cache_time: 3 })	
		    break;
		  case 'second':
						await User.findOne({ uuid }).then(async user => {
							if (user.resources.crio < ctx[1]) {
								await ctx[0].reply(ctx[0].i18n.t('fatal_swap'))
							} else {
								if (user.resources.amulets.second) {
									await ctx[0].reply('–î–∏–∑–∞–Ω—Ç—ç—Ä–∞ üéñ —É–∂–µ –≤ –Ω–∞–ª–∏—á–∏–∏ ‚úÖ')
								} else {
									await User.updateOne(
										{ uuid },
										{
											$inc: {
												'resources.crio': -ctx[1],
												'stats.hp': ctx[4],
											},
											$set: { 'resources.amulets.second': true },
										}
									).then(res => console.log(res))
										await ctx[0].reply(
											`‚úÖ –û–±–º–µ–Ω: ${ctx[1]} üßä ‚û† –î–∏–∑–∞–Ω—Ç—ç—Ä–∞ üéñ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!`
										)
								}
							}
						})
						ctx[0].answerCbQuery('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –æ–±–º–µ–Ω  ', { cache_time: 3 })	
		    break;
		  case 'third':
						await User.findOne({ uuid }).then(async user => {
							if (user.resources.crio < ctx[1]) {
								await ctx[0].reply(ctx[0].i18n.t('fatal_swap'))
							} else {
								if (user.resources.amulets.third) {
									await ctx[0].reply('–î–µ–º–æ–Ω—ë–Ω–æ–∫ üé≠ —É–∂–µ –≤ –Ω–∞–ª–∏—á–∏–∏ ‚úÖ')
								} else {
									await User.updateOne(
										{ uuid },
										{
											$inc: {
												'resources.crio': -ctx[1],
												'stats.bm': ctx[3],
												'stats.hp': ctx[4],
											},
											$set: { 'resources.amulets.third': true },
										}
									).then(res => console.log(res))
										await ctx[0].reply(
											`‚úÖ –û–±–º–µ–Ω: ${ctx[1]} üßä ‚û† –î–µ–º–æ–Ω—ë–Ω–æ–∫ üé≠ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!`
										)
								}
							}
						})
						ctx[0].answerCbQuery('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –æ–±–º–µ–Ω  ', { cache_time: 3 })	
		    break;
		  default:
		    	console.log('error')
		}
	} catch (e) {
		console.error(e)
	}
}

// –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥
let swapResources = throttle(swappingResources, 1500)
let swappAccessories = throttle(swappingAccessories, 1500)

//'üßä ‚û† üÉè' -> –ö—Ä–∏–æ–Ω–∏—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
bot.action(new RegExp('s_c_first_(.+)'), async ctx => await swapResources([ctx, 95, 5, '–∫–∞—Ä—Ç—ã']))
bot.action(new RegExp('s_c_second_(.+)'), async ctx => await swapResources([ctx, 135, 10, '–∫–∞—Ä—Ç—ã']))
bot.action(new RegExp('s_c_third_(.+)'), async ctx => await swapResources([ctx, 245, 30, '–∫–∞—Ä—Ç—ã']))
// 'üßä ‚û† üíé' -> –ö—Ä–∏–æ–Ω–∏—Ç—ã –Ω–∞ —Å–∞–º–æ—Ü–≤–µ—Ç—ã
bot.action(new RegExp('s_g_first_(.+)'), async ctx => await swapResources([ctx, 185, 5, '—Å–∞–º–æ—Ü–≤–µ—Ç—ã']))
bot.action(new RegExp('s_g_second_(.+)'), async ctx => await swapResources([ctx, 340, 15, '—Å–∞–º–æ—Ü–≤–µ—Ç—ã']))
bot.action(new RegExp('s_g_third_(.+)'), async ctx => await swapResources([ctx, 549, 40, '—Å–∞–º–æ—Ü–≤–µ—Ç—ã']))
// 'üßä ‚û† üîÆ' -> –ö—Ä–∏–æ–Ω–∏—Ç—ã –Ω–∞ –∞–º—É–ª–µ—Ç—ã
bot.action(new RegExp('s_a_first_(.+)'), async ctx => await swappAccessories([ctx, 376, "first", 25000, 75000]))
bot.action(new RegExp('s_a_second_(.+)'), async ctx => await swappAccessories([ctx, 792, "second", 0, 125000]))
bot.action(new RegExp('s_a_third_(.+)'), async ctx => await swappAccessories([ctx, 1200, "third", 500000, 500000]))
// ü™ô ‚û† üßä
bot.action(new RegExp('s_cl_first_c_(.+)'), async ctx => await swapResources([ctx, 9, 5, '–º–æ–Ω–µ—Ç—ã']))
bot.action(new RegExp('s_cl_second_c_(.+)'), async ctx => await swapResources([ctx, 32, 25, '–º–æ–Ω–µ—Ç—ã']))
// ü™ô ‚û† üë§
bot.action(new RegExp('s_cl_place_(.+)'), async ctx => await swapResources([ctx, 125, 1, '–º–µ—Å—Ç–æ']))
module.exports = bot
