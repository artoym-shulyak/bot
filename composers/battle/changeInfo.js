const { Composer, Markup, Extra } = require('telegraf')
const bot = new Composer()
const User = require('../../models/user.model.js')
const Characters = require('../../models/characters.model.js')
const throttle = require('../../utils/throttle.js')

// Components ----->
// '–°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Ç.–¥' 
const changeBattle = async (ctx) => {
	try {
		const uuid = ctx[0].from.id // ID user
		let action = 'reply'
  let nameChar
  let newChar
  let character

		if (ctx[0].updateType === 'callback_query') {
			const data = ctx[0].match[1]
			if (data.indexOf(uuid) === -1) return
			action = "editMessageText"
		 ctx[0].answerCbQuery('‚öîÔ∏è –°—Ä–∞–∂–µ–Ω–∏–µ', { cache_time: 3 })
		} 

	if (await User.findOne({uuid}) == null) return
	
		switch (ctx[1]) {
		  case '—Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üß© –±–∞—Ç—Ç–ª':
						await ctx[0][action](
							ctx[0].i18n.t('üß© –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞(–ë–∞—Ç—Ç–ª)'),
							Extra.markup(
								Markup.inlineKeyboard([
									Markup.callbackButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `fight_characters_${uuid}`),
								])
							).HTML()
						)
		    break;
		  case 'üß© —Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–≤–ø –∫–æ–º–∞–Ω–¥–∞':
						await ctx[0][action](
							ctx[0].i18n.t('üß© –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π(–ë–∞—Ç—Ç–ª)'),
							Extra.markup(
								Markup.inlineKeyboard([
									Markup.callbackButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `fight_team_chars_${uuid}`),
								])
							).HTML()
						)
		    break;
		  case '–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üß© –±–∞—Ç—Ç–ª':
					nameChar = ctx[0].message.text
						.toLowerCase()
						.replace(/—Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞/i, '')
						.trim()

					await User.findOne({ uuid }).then(async user => {

						if (await Characters.findOne({search: nameChar})) {
							character = await Characters.findOne({search: nameChar})
							if (user.characters.includes(character.uuid)) {
								if (character.search === nameChar) {
									newChar = await character

									await User.updateOne({ uuid }, { $set: { 'battle.char': newChar } }).then(
										async () => {
											await ctx[0].replyWithHTML(
												`‚ú® <code>${user.name}</code>, —Ç—ã –ø–æ–º–µ–Ω—è–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ üß© ${newChar.name}.`,
											)
										}
									)
									return
								}
							}
						}
					})
		  	break
		  case '—Ä—è–¥ 1(–ø–≤–ø –∫–æ–º–∞–Ω–¥–∞)':
					nameChar = ctx[0].message.text.toLowerCase().replace(/—Ä—è–¥ 1/i, '').trim()


					await User.findOne({ uuid }).then(async user => {
						if (await Characters.findOne({search: nameChar})) {
							character = await Characters.findOne({search: nameChar})
							if (user.characters.includes(character.uuid)) {
								if (character.search === nameChar) {
									newChar = await character

									if (
										(await user.battle.teamCharacters.first.uuid) === newChar.uuid ||
										(await user.battle.teamCharacters.second.uuid) === newChar.uuid ||
										(await user.battle.teamCharacters.third.uuid) === newChar.uuid
									) {
										ctx[0].replyWithHTML(
											`üõó –≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ üß© ${newChar.name} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ.`
										)
										return
									}

									await User.updateOne(
										{ uuid },
										{ $set: { 'battle.teamCharacters.first': newChar } }
									).then(async () => {
										await ctx[0].replyWithHTML(
											`‚ú® <code>${user.name}</code>, —Ç—ã –ø–æ–º–µ–Ω—è–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ üß© ${newChar.name}.`
										)
									})
								}
							}
						}
					})
		  	break
		  case '—Ä—è–¥ 2(–ø–≤–ø –∫–æ–º–∞–Ω–¥–∞)':
					nameChar = ctx[0].message.text.toLowerCase().replace(/—Ä—è–¥ 2/i, '').trim()

					await User.findOne({ uuid }).then(async user => {
						if (await Characters.findOne({search: nameChar})) {
							character = await Characters.findOne({search: nameChar})
							if (user.characters.includes(character.uuid)) {
								if (character.search === nameChar) {
									newChar = await character

									if (
										(await user.battle.teamCharacters.first.uuid) === newChar.uuid ||
										(await user.battle.teamCharacters.second.uuid) === newChar.uuid ||
										(await user.battle.teamCharacters.third.uuid) === newChar.uuid
									) {
										ctx[0].replyWithHTML(
											`üõó –≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ üß© ${newChar.name} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ.`
										)
										return
									}

									await User.updateOne(
										{ uuid },
										{ $set: { 'battle.teamCharacters.second': newChar } }
									).then(async () => {
										await ctx[0].replyWithHTML(
											`‚ú® <code>${user.name}</code>, —Ç—ã –ø–æ–º–µ–Ω—è–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ üß© ${newChar.name}.`
										)
									})
								}
							}
						}
					})
		  	break
		  case '—Ä—è–¥ 3(–ø–≤–ø –∫–æ–º–∞–Ω–¥–∞)':
					nameChar = ctx[0].message.text.toLowerCase().replace(/—Ä—è–¥ 3/i, '').trim()

					await User.findOne({ uuid }).then(async user => {
						if (await Characters.findOne({search: nameChar})) {
							character = await Characters.findOne({search: nameChar})
							if (user.characters.includes(character.uuid)) {
								if (character.search === nameChar) {
									newChar = await character

									if (
										(await user.battle.teamCharacters.first.uuid) === newChar.uuid ||
										(await user.battle.teamCharacters.second.uuid) === newChar.uuid ||
										(await user.battle.teamCharacters.third.uuid) === newChar.uuid
									) {
										ctx[0].replyWithHTML(
											`üõó –≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ üß© ${newChar.name} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ.`
										)
										return
									}

									await User.updateOne(
										{ uuid },
										{ $set: { 'battle.teamCharacters.third': newChar } }
									).then(async () => {
										await ctx[0].replyWithHTML(
											`‚ú® <code>${user.name}</code>, —Ç—ã –ø–æ–º–µ–Ω—è–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ üß© ${newChar.name}.`
										)
									})
								}
							}
						}
					})
		  	break
		  default:
		    console.log("Don't this command change character.")
		}
	} catch (e) {
		console.error(e)
	}
}

// –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥
let throttle–°hangeBattle = throttle(changeBattle, 1500)

// Meseges 
bot.hears(/\—Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞(.+)/i, ctx => throttle–°hangeBattle([ctx, '–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üß© –±–∞—Ç—Ç–ª']))
bot.hears(/\—Ä—è–¥ 1(.+)/i, ctx => throttle–°hangeBattle([ctx, '—Ä—è–¥ 1(–ø–≤–ø –∫–æ–º–∞–Ω–¥–∞)']))
bot.hears(/\—Ä—è–¥ 2(.+)/i, ctx => throttle–°hangeBattle([ctx, '—Ä—è–¥ 2(–ø–≤–ø –∫–æ–º–∞–Ω–¥–∞)']))
bot.hears(/\—Ä—è–¥ 3(.+)/i, ctx => throttle–°hangeBattle([ctx, '—Ä—è–¥ 3(–ø–≤–ø –∫–æ–º–∞–Ω–¥–∞)']))

// Actions
bot.action(new RegExp('change_character_(.+)'), ctx => throttle–°hangeBattle([ctx, '—Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üß© –±–∞—Ç—Ç–ª']))
bot.action(new RegExp('change_team_character_(.+)'), ctx => throttle–°hangeBattle([ctx, 'üß© —Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–≤–ø –∫–æ–º–∞–Ω–¥–∞']))

module.exports = bot
