const { Composer, Markup, Extra } = require('telegraf')
const bot = new Composer()
const User = require('../../models/user.model.js')
const Rating = require('../../models/rating.model.js')
const throttle = require('../../utils/throttle.js')

// ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const settings = async (ctx) => {
	try {
		const uuid = ctx[0].from.id // ID user
  let data
  let action = 'reply'

	if (ctx[0].updateType === 'callback_query') {
		data = ctx[0].match[1]
		if (data.indexOf(uuid) === -1) return
		action = 'editMessageText'
	 ctx[0].answerCbQuery('‚öôÔ∏è', { cache_time: 3 })
	} 

	if (await User.findOne({uuid}) == null) return

  switch (ctx[1]) {
   case '–≥–ª–∞–≤–Ω–∞—è':
				await ctx[0][action](
						ctx[0].i18n.t('settings'),
						Extra.markup(
							Markup.inlineKeyboard([
								[Markup.callbackButton('ü™™ –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫', `change_name_${uuid}`)],
								[
									Markup.callbackButton(
										'üîè –í–∏–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
										`visibility_info_${uuid}`
									),
								],
								[Markup.callbackButton('‚õì –†–µ—Ñ–µ—Ä–∞–ª–∫–∞', `referral_${uuid}`)],
								[
									Markup.callbackButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `studia_${uuid}`),
									Markup.urlButton(
									'üìù –ö–æ–º–∞–Ω–¥—ã',
									'https://telegra.ph/Komandy-10-18-2'
								)
									],
							])
						).HTML()
					)
   	break
   case '–≤–∏–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏':
				await ctx[0].editMessageText(
					ctx[0].i18n.t('visibility_info'),
					Extra.markup(
						Markup.inlineKeyboard([
							[Markup.callbackButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `settings_${uuid}`)],
						])
					).HTML()
				)
   	break
   case '—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫':
				await ctx[0].editMessageText(
					ctx[0].i18n.t('change_name'),
					Extra.markup(
						Markup.inlineKeyboard([
							Markup.callbackButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `settings__${uuid}`),
						])
					).HTML()
				)
   	break
   case '–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞':
				const name = ctx[0].message.text.toLowerCase() // TEXT user

				if (name.indexOf('—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫') != -1) {
					let stateName = ctx[0].message.text.replace(/—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫/i, '').trim() // New name of user

					// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∏–∫–µ
					if (stateName.length < 2 || stateName.length > 20) {
						await ctx[0].replyWithHTML(
							'‚öí –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: <i>–º–∏–Ω. 2 - –º–∞–∫—Å 20 —Å–∏–º–≤–æ–ª–æ–≤</i>.'
						)
						return
					}

					// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∏–º—è
					await User.find().then(async users => {
						users.forEach(player => {
							if (player.name == stateName) {
								ctx[0].reply('üßë‚Äçüíª –≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.')
								throw new Error('–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ')
							}
						})
					})

					await User.findOne({ uuid }).then(async user => {
						// –ï—Å–ª–∏ —É–∂–µ –º–µ–Ω—è–ª, –¥–∞–ª–µ–µ –ø–ª–∞—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
						if (user.settings.countName > 0) {
							// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∏–∫–∞ (–¶–µ–Ω–∞: 5 –∫—Ä–∏–æ–Ω–∏—Ç–æ–≤ üßä)
							if (user.resources.crio > 5) {
								// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
								await Rating.updateOne({ uuid }, { $set: { name: stateName } })
								await User.updateOne(
									{ uuid },
									{
										$set: { name: stateName },
										$inc: { 'settings.countName': 1, 'resources.crio': -5 },
									}
								).then(async () => {
									await ctx[0].reply(
										`ü™™ –í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ <strong>${stateName}</strong>.`,
										{ parse_mode: 'HTML' }
									)
								})
							} else {
								ctx[0].reply('ü™™ –î–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞ –Ω—É–∂–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 5 –∫—Ä–∏–æ–Ω–∏—Ç–∞ üßä')
							}
						} else {
							// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
							await Rating.updateOne({ uuid }, { $set: { name: stateName } })
							await User.updateOne(
								{ uuid },
								{ $set: { name: stateName }, $inc: { 'settings.countName': 1 } }
							).then(async () => {
								await ctx[0].reply(
									`ü™™ –í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ <strong>${stateName}</strong>.`,
									{ parse_mode: 'HTML' }
								)
							})
						}
					})
				}
   	break
   case '–≤–∏–ø':
				const textVip = ctx[0].match[0].toLowerCase() // Information btn
				if (textVip === '–ø–æ–∫–∞–∑–∞—Ç—å –≤–∏–ø') {
					await User.updateOne(
						{ uuid },
						{ $set: { 'settings.visibility.vipCard': false } }
					).then(async () => {
						await ctx[0].replyWithHTML(
							'‚úÖ –°–≤–µ–¥–µ–Ω–∏–µ –æ <code>‚≠êÔ∏è VIP-–∫–∞—Ä—Ç–∞</code> ‚û† <strong><i>–ø–æ–∫–∞–∑–∞–Ω–æ</i></strong>.'
						)
					})
				} else if (textVip === '—Å–∫—Ä—ã—Ç—å –≤–∏–ø') {
					await User.updateOne(
						{ uuid },
						{ $set: { 'settings.visibility.vipCard': true } }
					).then(async () => {
						await ctx[0].replyWithHTML(
							'‚úÖ –°–≤–µ–¥–µ–Ω–∏–µ –æ <code>‚≠êÔ∏è VIP-–∫–∞—Ä—Ç–∞</code> ‚û† <strong><i>—Å–∫—Ä—ã—Ç–∞</i></strong>.'
						)
					})
				}
   	break
   case '–∫—Ä–∏–æ–Ω–∏—Ç':
				const textCrio = ctx[0].match[0].toLowerCase() // Information btn

				if (textCrio === '–ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏–æ–Ω–∏—Ç') {
					await User.updateOne(
						{ uuid },
						{ $set: { 'settings.visibility.crio': false } }
					).then(async () => {
						await ctx[0].replyWithHTML(
							'‚úÖ –°–≤–µ–¥–µ–Ω–∏–µ –æ <code>üßä –ö—Ä–∏–æ–Ω–∏—Ç</code> ‚û† <strong><i>–ø–æ–∫–∞–∑–∞–Ω–æ</i></strong>.'
						)
					})
				} else if (textCrio === '—Å–∫—Ä—ã—Ç—å –∫—Ä–∏–æ–Ω–∏—Ç') {
					await User.updateOne(
						{ uuid },
						{ $set: { 'settings.visibility.crio': true } }
					).then(async () => {
						await ctx[0].replyWithHTML(
							'‚úÖ –°–≤–µ–¥–µ–Ω–∏–µ –æ <code>üßä –ö—Ä–∏–æ–Ω–∏—Ç</code> ‚û† <strong><i>—Å–∫—Ä—ã—Ç–∞</i></strong>.'
						)
					})
				}
   	break
   case '–∫–∞—Ä—Ç—ã':
				const textRecrute = ctx[0].match[0].toLowerCase() // Information btn

				if (textRecrute === '–ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã') {
					await User.updateOne(
						{ uuid },
						{ $set: { 'settings.visibility.card': false } }
					).then(async () => {
						await ctx[0].replyWithHTML(
							'‚úÖ –°–≤–µ–¥–µ–Ω–∏–µ –æ <code>üÉè –ù–∞–π–º</code> ‚û† <strong><i>–ø–æ–∫–∞–∑–∞–Ω–æ</i></strong>.'
						)
					})
				} else if (textRecrute === '—Å–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—ã') {
					await User.updateOne(
						{ uuid },
						{ $set: { 'settings.visibility.card': true } }
					).then(async () => {
						await ctx[0].replyWithHTML(
							'‚úÖ –°–≤–µ–¥–µ–Ω–∏–µ –æ <code>üÉè –ù–∞–π–º</code> ‚û† <strong><i>—Å–∫—Ä—ã—Ç–∞</i></strong>.'
						)
					})
				}
   	break
   default:
   	console.log('This point doesn"t not exist.')
  }

} catch (e) {
	console.error(e)
}
}

// –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥ ----->
let throttleSettings = throttle(settings, 1500)

// Messages
bot.hears(new RegExp('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'i'), ctx => throttleSettings([ctx, '–≥–ª–∞–≤–Ω–∞—è']))
bot.hears(/\—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫(.+)/i, ctx => throttleSettings([ctx, '–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞']))
bot.hears([new RegExp('–ø–æ–∫–∞–∑–∞—Ç—å –≤–∏–ø', 'i'), new RegExp('—Å–∫—Ä—ã—Ç—å –≤–∏–ø', 'i')], ctx => throttleSettings([ctx, '–≤–∏–ø']))
bot.hears([new RegExp('–ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏–æ–Ω–∏—Ç', 'i'), new RegExp('—Å–∫—Ä—ã—Ç—å –∫—Ä–∏–æ–Ω–∏—Ç', 'i')], ctx => throttleSettings([ctx, '–∫—Ä–∏–æ–Ω–∏—Ç']))
bot.hears([new RegExp('–ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã', 'i'), new RegExp('—Å–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—ã', 'i')], ctx => throttleSettings([ctx, '–∫–∞—Ä—Ç—ã']))

// Actions ----->
bot.action(new RegExp('settings_(.+)'), ctx => throttleSettings([ctx, '–≥–ª–∞–≤–Ω–∞—è']))
bot.action(new RegExp('visibility_info_(.+)'), ctx => throttleSettings([ctx, '–≤–∏–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏']))
bot.action(new RegExp('change_name_(.+)'), ctx => throttleSettings([ctx, '—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫']))

module.exports = bot
