const { Composer, Markup, Extra } = require('telegraf')
const User = require('../../models/user.model.js')
const BlackMarket = require('../../models/black_market.model.js')
const bot = new Composer()
const throttle = require('../../utils/throttle.js')

// '–ß–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫'
const blackMarket = async (ctx) => {
	try {
		const uuid = String(ctx[0].from.id) // ID user
		const data = ctx[0].match[0] // Information btn
		if (data.indexOf(uuid) === -1) return // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—É–∂–æ–∫–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É

		switch (ctx[1]) {
		 case '–≥–ª–∞–≤–Ω–∞—è':
		  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
				if (new Date().getDay() === 6) {
					await BlackMarket.find().then(async goods => {
						const good_1 = await goods[0].count
						await ctx[0].editMessageText(
							ctx[0].i18n.t('black_marketplace'),
							Extra.markup(
								Markup.inlineKeyboard([
									[
										Markup.callbackButton(
											`üß© –°–∞–π—Ç–∞–º–∞(SSS) ${good_1} —à—Ç. ‚ûª 15 üßä | 450 ‚ÇΩ`,
											`buy_char_saitama_${uuid}`
										),
									],
									[
										Markup.callbackButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', `market_donat_${uuid}`),
										Markup.callbackButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `shop_${uuid}`),
									],
								])
							).HTML()
						)
					})
				} 
				else {
					await ctx[0].reply('üè¶ –ß—ë—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫ –æ—Ç–∫—Ä—ã—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º.')
				}

				ctx[0].answerCbQuery('üè¶ –ß—ë—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫', { cache_time: 3 })
		 	break
		 case '—Å–∞–π—Ç–∞–º–∞':
				await BlackMarket.findOne({ uuid: 1 }).then(async good => {
					if (good.count === 0) {
						await ctx[0].reply(
							'üë®‚Äçüé§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏, –≤—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ!'
						)
						ctx[0].answerCbQuery('‚úÖ –û—Ç–º–µ–Ω–∞', { cache_time: 3 })
						return
					}
					await User.findOne({ uuid }).then(async user => {
						if (!user.characters.includes(3) && user.resources.crio >= good.price) {
							await User.updateOne(
								{ uuid },
								{
									$push: { characters: 3 },
									$inc: { 'stats.bm': 28500, 'stats.hp': 128500 },
								}
							).then(async () => {
								await BlackMarket.updateOne(
									{ uuid: 1 },
									{ $inc: { count: -1 } }
								).then(async () => {
									await ctx[0].reply(
										'üë®‚Äçüé§ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–∏–æ–±—Ä–µ–ª üß© –°–∞–π—Ç–∞–º—É, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–Ω–æ–≤–∞ –∫ –Ω–∞–º –∑–∞ –ø–æ–∫—É–ø–∫–æ–π!'
									)
									ctx[0].answerCbQuery('‚úÖ –£—Å–ø–µ—à–Ω–æ', { cache_time: 3 })
								})
							})
						} else {
							await ctx[0].reply(
								'üë®‚Äçüé§ –ü–æ–∫—É–ø–∞–µ—Ç—å, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å üß© –°–∞–π—Ç–∞–º–∞ –∏–ª–∏ –∂–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏–æ–Ω–∏—Ç–æ–≤ üßä, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–Ω–æ–≤–∞ –∫ –Ω–∞–º –∑–∞ –ø–æ–∫—É–ø–∫–æ–π!'
							)
							ctx[0].answerCbQuery('‚úÖ –û—Ç–º–µ–Ω–∞', { cache_time: 3 })
						}
					})
				})
		 	break
		 default:
		 	console.log('This component or product doesn"t not exist.')
		}

	} catch (e) {
		console.error(e)
	}
}

// –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥
let throttleBlackMarket = throttle(blackMarket, 1500)

// Actions
bot.action(new RegExp('black_marketplace_(.+)'), ctx => throttleBlackMarket([ctx, '–≥–ª–∞–≤–Ω–∞—è']))
bot.action(new RegExp('buy_char_saitama_(.+)'), ctx => throttleBlackMarket([ctx, '—Å–∞–π—Ç–∞–º–∞']))

module.exports = bot
