// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ê–¥–º–∏–Ω–æ–≤ ---->
// 1) –î–∞—Ç—å –∫–∞—Ä—Ç—ã [ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç—ã ] + [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 2) –î–∞—Ç—å –∫—Ä–∏–æ [ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç—ã ] + [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 3) –î–∞—Ç—å —Å–∞–º–æ—Ü–≤–µ—Ç—ã [ –∫–æ–ª-–≤–æ —Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤ ] + [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 4) –î–∞—Ç—å –∞–º—É–ª–µ—Ç [ –Ω–æ–º–µ—Ä –∞–º—É–ª–µ—Ç–∞ ] + [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 5) –°–º–µ–Ω–∞ –Ω–∏–∫–∞ [ –Ω–æ–≤—ã–π –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞ ] –Ω–∞ [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 6) –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∏–∫–∞ [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 7) –î–∞—Ç—å –±–º [ –∫–æ–ª-–≤–æ –±–º ] + [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 8) –î–∞—Ç—å –±—Å [ –∫–æ–ª-–≤–æ –±–º ] + [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 9) –î–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ [ ID –∏–≥—Ä–æ–∫–∞ ] + [ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ] ‚úÖ
// 10) –¢–∞–π–º–µ—Ä –±–æ–Ω—É—Å–∞ [ ID –∏–≥—Ä–æ–∫–∞ ] + [ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ ] ‚úÖ
// 11) –î–∞—Ç—å –∫–Ω–∏–≥—É [ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ ] + [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 12) –ü—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É [ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ ] + [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 13) –î–∞—Ç—å –º–æ–Ω–µ—Ç—ã [ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç ] + [ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ì–∏–ª—å–¥–∏–∏ ] ‚úÖ
// 14) .–Ω–∞–π—Ç–∏ [ ID –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 15) –ò–Ω—Ñ–∞ [ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ] ‚úÖ
// 16) –î–∞—Ç—å —Å [ —á–∏—Å–ª–æ ] –ø–æ [ —á–∏—Å–ª–æ ] [ —Å–¥–µ–ª–∞—Ç—å 5-—è—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ ] [ –≤—ã–±–æ—Ä: –∫–∞—Ä—Ç—ã, —Å–∞–º–æ—Ü–≤–µ—Ç—ã, –±–º, —Ö–ø, –∫—Ä–∏–æ ] + [ –∫–æ–ª-–≤–æ ] ‚úÖ

const { Composer, Extra, Markup } = require('telegraf')
const bot = new Composer()
const User = require('../../models/user.model.js')
const Clan = require('../../models/clan.model.js')
const Rating = require('../../models/rating.model.js')
const Characters = require('../../models/characters.model.js')
const sleep = require('../../utils/sleep.js')

//  –î–∞—Ç—å –∫–∞—Ä—Ç—ã [ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç—ã ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å –∫–∞—Ä—Ç—ã(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let count = ctx.message.text
			.split('+')[0]
			.replace(/–¥–∞—Ç—å –∫–∞—Ä—Ç—ã/i, '')
			.trim()
		let uuid = ctx.message.text.split('+')[1].trim()

		if (await User.findOne({uuid}) == null) return

		await User.updateOne(
			{ uuid },
			{ $inc: { 'resources.recrute': +count } }
		).then(async () => {
			await ctx.telegram.sendMessage(
				uuid,
				`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç</i> ‚ûª <strong>${count} üÉè</strong>`,
				{
					parse_mode: 'HTML',
				}
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å –∫—Ä–∏–æ [ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç—ã ] + [ iD –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å –∫—Ä–∏–æ(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let count = ctx.message.text
			.split('+')[0]
			.replace(/–¥–∞—Ç—å –∫—Ä–∏–æ/i, '')
			.trim()
		let uuid = ctx.message.text.split('+')[1].trim()

		if (await User.findOne({uuid}) == null) return

		await User.updateOne({ uuid }, { $inc: { 'resources.crio': +count } }).then(
			async () => {
				await ctx.telegram.sendMessage(
					uuid,
					`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ –∫–æ–ª-–≤–æ –∫—Ä–∏–æ–Ω–∏—Ç–æ–≤</i> ‚ûª <strong>${count} üßä</strong>`,
					{
						parse_mode: 'HTML',
					}
				)
			}
		)
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å –∫—Ä–∏–æ [ –∫–æ–ª-–≤–æ —Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å —Å–∞–º–æ—Ü–≤–µ—Ç—ã(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let count = ctx.message.text
			.split('+')[0]
			.replace(/–¥–∞—Ç—å —Å–∞–º–æ—Ü–≤–µ—Ç—ã/i, '')
			.trim()
		let uuid = ctx.message.text.split('+')[1].trim()

		if (await User.findOne({uuid}) == null) return

		await User.updateOne({ uuid }, { $inc: { 'resources.gems': +count } }).then(
			async () => {
				await ctx.telegram.sendMessage(
					uuid,
					`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ –∫–æ–ª-–≤–æ —Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤</i> ‚ûª <strong>${count} üíé</strong>`,
					{
						parse_mode: 'HTML',
					}
				)
			}
		)
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å –∞–º—É–ª–µ—Ç [ –Ω–æ–º–µ—Ä –∞–º—É–ª–µ—Ç–∞ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å –∞–º—É–ª–µ—Ç 1(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let uuid = await ctx.message.text.replace(/–¥–∞—Ç—å –∞–º—É–ª–µ—Ç 1/i, '').trim()

		if (await User.findOne({uuid}) == null) return

		await User.updateOne(
			{ uuid },
			{
				$set: { 'resources.amulets.first': true },
				$inc: {
					'stats.bm': 300000,
					'stats.hp': 475000,
					'resources.recrute': 10,
				},
			}
		).then(async () => {
			await ctx.telegram.sendMessage(
				uuid,
				`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ –∞–º—É–ª–µ—Ç</i> <strong>‚ûªü™¨ –°—É—á–æ–Ω–æ–∫</strong>.`,
				{
					parse_mode: 'HTML',
				}
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å –∞–º—É–ª–µ—Ç [ –Ω–æ–º–µ—Ä –∞–º—É–ª–µ—Ç–∞ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å –∞–º—É–ª–µ—Ç 2(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let uuid = await ctx.message.text.replace(/–¥–∞—Ç—å –∞–º—É–ª–µ—Ç 2/i, '').trim()

	  if (await User.findOne({uuid}) == null) return

		await User.updateOne(
			{ uuid },
			{
				$set: { 'resources.amulets.second': true },
				$inc: {
					'stats.bm': 512000,
					'stats.hp': 745000,
					'resources.recrute': 21,
				},
			}
		).then(async () => {
			await ctx.telegram.sendMessage(
				uuid,
				`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤—Ä—É—á–∏–ª–∞ —Ç–µ–±–µ –∞–º—É–ª–µ—Ç</i> <strong>‚ûªüéñ –î–∏–∑–∞–Ω—Ç—ç—Ä–∞</strong>.`,
				{
					parse_mode: 'HTML',
				}
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å –∞–º—É–ª–µ—Ç [ –Ω–æ–º–µ—Ä –∞–º—É–ª–µ—Ç–∞ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å –∞–º—É–ª–µ—Ç 3(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let uuid = await ctx.message.text.replace(/–¥–∞—Ç—å –∞–º—É–ª–µ—Ç 3/i, '').trim()

  if (await User.findOne({uuid}) == null) return

		await User.updateOne(
			{ uuid },
			{
				$set: { 'resources.amulets.third': true },
				$inc: {
					'stats.bm': 925000,
					'resources.recrute': 30,
				},
			}
		).then(async () => {
			await ctx.telegram.sendMessage(
				uuid,
				`‚ÄºÔ∏è <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤—Ä—É—á–∏–ª–∞ —Ç–µ–±–µ –∞–º—É–ª–µ—Ç</i> <strong>‚ûªüé≠ –î–µ–º–æ–Ω—ë–Ω–æ–∫</strong>.`,
				{
					parse_mode: 'HTML',
				}
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –°–º–µ–Ω–∞ –Ω–∏–∫–∞ [ –Ω–æ–≤—ã–π –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞ ] –Ω–∞ [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let uuid = await ctx.message.text
			.split('–Ω–∞')[0]
			.replace(/–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫/i, '')
			.trim()
		let name = await ctx.message.text.split('–Ω–∞')[1].trim()

  if (await User.findOne({uuid}) == null) return

		await User.updateOne({ uuid }, { $set: { name: name } }).then(async () => {
			await ctx.telegram.sendMessage(
				uuid,
				`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞ —Ç–µ–±–µ –∏–º—è –Ω–∞ </i> <strong>${name}</strong>`,
				{
					parse_mode: 'HTML',
				}
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∏–∫–∞ [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∏–∫–∞(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let uuid = await ctx.message.text
			.replace(/–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∏–∫–∞/i, '')
			.trim()

  if (await User.findOne({uuid}) == null) return

		await User.updateOne({ uuid }, { $set: { countName: 0 } }).then(
			async () => {
				await ctx.telegram.sendMessage(
					uuid,
					`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ–±–Ω—É–ª–∏–ª–∞ —Ç–µ–±–µ –∫–æ—Ç–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∫ –Ω—É–ª—é.</i>`,
					{
						parse_mode: 'HTML',
					}
				)
			}
		)
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å –±–º [ –∫–æ–ª-–≤–æ –±–º ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å –±–º(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let count = await ctx.message.text
			.split('+')[0]
			.replace(/–¥–∞—Ç—å –±–º/i, '')
			.trim()
		let uuid = await ctx.message.text.split('+')[1].trim()

  if (await User.findOne({uuid}) == null) return

		await User.updateOne({ uuid }, { $inc: { 'stats.bm': +count } }).then(
			async () => {
				await ctx.telegram.sendMessage(
					uuid,
					`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏–±–∞–≤–∏–ª–∞ –∫ —Ç–≤–æ–µ–π –ë–æ–µ–≤–æ–π –ú–æ—â–∏</i> ‚ûª<strong>üí•${count}</strong>`,
					{
						parse_mode: 'HTML',
					}
				)
			}
		)
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å —Ö–ø [ –∫–æ–ª-–≤–æ —Ö—Ä ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å —Ö–ø(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let count = await ctx.message.text
			.split('+')[0]
			.replace(/–¥–∞—Ç—å —Ö–ø/i, '')
			.trim()
		let uuid = await ctx.message.text.split('+')[1].trim()

  if (await User.findOne({uuid}) == null) return

		await User.updateOne({ uuid }, { $inc: { 'stats.hp': +count } }).then(
			async () => {
				await ctx.telegram.sendMessage(
					uuid,
					`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏–±–∞–≤–∏–ª–∞ –∫ —Ç–≤–æ–µ–π –ñ–∏–≤—É—á–µ—Å—Ç–∏</i> ‚ûª <strong>‚ù§Ô∏è${count}</strong>`,
					{
						parse_mode: 'HTML',
					}
				)
			}
		)
	} catch (e) {
		console.error(e)
	}
})

// –¢–∞–π–º–µ—Ä –±–æ–Ω—É—Å–∞ [ ID –∏–≥—Ä–æ–∫–∞ ] + [ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ ]
bot.hears(/\—Ç–∞–π–º–µ—Ä –±–æ–Ω—É—Å–∞(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let uuid = await ctx.message.text
			.split('+')[0]
			.replace(/—Ç–∞–π–º–µ—Ä –±–æ–Ω—É—Å–∞/i, '')
			.trim()
		let count = await ctx.message.text.split('+')[1].trim()

  if (await User.findOne({uuid}) == null) return

		await User.updateOne(
			{ uuid },
			{ $set: { 'deadlines.bonus.term': +count } }
		).then(async () => {
			await ctx.telegram.sendMessage(
				uuid,
				`‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ–±–Ω–æ–≤–∏–ª —Ç–µ–±–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –∫–∞–∂–¥—ã–µ</i> ‚ûª <strong>${count} —á.</strong>`,
				{
					parse_mode: 'HTML',
				}
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å –∫–Ω–∏–≥—É [ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å –∫–Ω–∏–≥—É 1(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		const text = await ctx.message.text.toLowerCase() // TEXT user
		let uuid = await ctx.message.text.replace(/–¥–∞—Ç—å –∫–Ω–∏–≥—É 1/i, '').trim()

  if (await User.findOne({uuid}) == null) return

		await User.updateOne(
			{ uuid },
			{
				$set: {
					'resources.books.first': true,
					'deadlines.bookFirst.deadline': new Date(
						Date.parse(new Date()) + 7 * 24 * 60 * 60 * 1000
					),
					'deadlines.bookFirst.state': true,
				},
				$inc: { 'stats.hp': 3000, 'resources.recrute': 1 },
			}
		).then(async () => {
			await ctx.telegram.sendMessage(
				uuid,
				'‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ –∫–Ω–∏–≥—É</i> ‚ûª üìò <strong>–ò—á–∞ –ò—á–∞</strong>.',
				{ parse_mode: 'HTML' }
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å –∫–Ω–∏–≥—É [ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å –∫–Ω–∏–≥—É 2(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		const text = await ctx.message.text.toLowerCase() // TEXT user
		let uuid = await ctx.message.text.replace(/–¥–∞—Ç—å –∫–Ω–∏–≥—É 2/i, '').trim()

  if (await User.findOne({uuid}) == null) return

		await User.updateOne(
			{ uuid },
			{
				$set: {
					'resources.books.second': true,
					'deadlines.bookSecond.deadline': new Date(
						Date.parse(new Date()) + 14 * 24 * 60 * 60 * 1000
					),
					'deadlines.bookSecond.state': true,
				},
				$inc: { 'stats.hp': 5000, 'stats.bm': 5000 },
			}
		).then(async () => {
			await ctx.telegram.sendMessage(
				uuid,
				'‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ –∫–Ω–∏–≥—É</i> ‚ûª üìó <strong>Solo Leaving</strong>.',
				{ parse_mode: 'HTML' }
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å –∫–Ω–∏–≥—É [ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–¥–∞—Ç—å –∫–Ω–∏–≥—É 3(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		const text = await ctx.message.text.toLowerCase() // TEXT user
		let uuid = await ctx.message.text.replace(/–¥–∞—Ç—å –∫–Ω–∏–≥—É 3/i, '').trim()

  if (await User.findOne({uuid}) == null) return

		await User.updateOne(
			{ uuid },
			{
				$set: {
					'resources.books.third': true,
					'deadlines.bookThird.deadline': new Date(
						Date.parse(new Date()) + 27 * 24 * 60 * 60 * 1000
					),
					'deadlines.bookThird.state': true,
				},
				$inc: { 'stats.hp': 24000, 'stats.bm': 12000, 'resources.recrute': 5 },
			}
		).then(async () => {
			await ctx.telegram.sendMessage(
				uuid,
				'‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ –∫–Ω–∏–≥—É</i> ‚ûª üìï <strong>–¢–µ—Ç—Ä–∞–¥—å —Å–º–µ—Ä—Ç–∏</strong>.',
				{ parse_mode: 'HTML' }
			)
		})
	} catch (e) {
		console.error()
	}
})

// –ü—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É [ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–ø—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É 1(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		const text = await ctx.message.text.toLowerCase() // TEXT user
		let uuid = await ctx.message.text.replace(/–ø—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É 1/i, '').trim()

  if (await User.findOne({uuid}) == null) return

		await User.findOne({ uuid }).then(async user => {
			const currentDate = await user.deadlines.bookFirst.deadline
			currentDate.setDate(currentDate.getDate() + 7)
			await User.updateOne(
				{ uuid },
				{
					$set: { 'deadlines.bookFirst.deadline': currentDate },
				}
			).then(async () => {
				await ctx.telegram.sendMessage(
					uuid,
					'‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–æ–¥–ª–∏–ª–∞ —Ç–µ–±–µ –∫–Ω–∏–≥—É</i> ‚ûª üìó <strong>–ü–æ–¥–Ω—è—Ç–∏—è —É—Ä–æ–≤–Ω—è –≤ –æ–¥–∏–Ω–æ—á–∫—É</strong>.',
					{ parse_mode: 'HTML' }
				)
			})
		})
	} catch (e) {
		console.error(e)
	}
})

// –ü—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É [ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–ø—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É 2(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		const text = await ctx.message.text.toLowerCase() // TEXT user
		let uuid = await ctx.message.text.replace(/–ø—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É 2/i, '').trim()

  if (await User.findOne({uuid}) == null) return

		await User.findOne({ uuid }).then(async user => {
			const currentDate = await user.deadlines.bookFirst.deadline
			currentDate.setDate(currentDate.getDate() + 7)
			await User.updateOne(
				{ uuid },
				{ $set: { 'deadlines.bookSecond.deadline': currentDate } }
			).then(async () => {
				await ctx.telegram.sendMessage(
					uuid,
					'‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–æ–¥–ª–∏–ª–∞ —Ç–µ–±–µ –∫–Ω–∏–≥—É</i> ‚ûª üìò <strong>–†–∞–π—Å–∫–∏–µ –∏–≥—Ä—ã</strong>.',
					{ parse_mode: 'HTML' }
				)
			})
		})
	} catch (e) {
		console.error(e)
	}
})

// –ü—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É [ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ ] + [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\–ø—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É 3(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		const text = await ctx.message.text.toLowerCase() // TEXT user
		let uuid = await ctx.message.text.replace(/–ø—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É 3/i, '').trim()

  if (await User.findOne({uuid}) == null) return

		await User.findOne({ uuid }).then(async user => {
			const currentDate = await user.deadlines.bookFirst.deadline
			currentDate.setDate(currentDate.getDate() + 7)
			await User.updateOne(
				{ uuid },
				{ $set: { 'deadlines.bookThird.deadline': currentDate } }
			).then(async () => {
				await ctx.telegram.sendMessage(
					uuid,
					'‚Äºü§ñ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–æ–¥–ª–∏–ª–∞ —Ç–µ–±–µ –∫–Ω–∏–≥—É</i> ‚ûª üìï <strong>–¢–µ—Ç—Ä–∞–¥—å —Å–º–µ—Ä—Ç–∏</strong>.',
					{ parse_mode: 'HTML' }
				)
			})
		})
	} catch (e) {
		console.error()
	}
})

// –î–∞—Ç—å –º–æ–Ω–µ—Ç—ã [ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç ] + [ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ì–∏–ª—å–¥–∏–∏ ]
bot.hears(/\–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let count = await ctx.message.text
			.split('+')[0]
			.replace(/–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã/i, '')
			.trim()
		let name = await ctx.message.text.split('+')[1].trim()

  if (await User.findOne({uuid}) == null) return

		await Clan.updateOne({ name }, { $inc: { money: +count } }).then(
			async () => {
				await ctx.replyWithHTML(
					`‚Äºü§ñ <i>–£—Å–ø–µ—à–Ω–æ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç</i> ‚ûª <strong>${count}</strong>`
				)
			}
		)
	} catch (e) {
		console.error(e)
	}
})

// .–Ω–∞–π—Ç–∏ [ ID –∏–≥—Ä–æ–∫–∞ ]
bot.hears(/\.–Ω–∞–π—Ç–∏(.+)/i, async ctx => {
	try {
		let uuid = await ctx.message.text.replace(/.–Ω–∞–π—Ç–∏/i, '').trim()

		if (await User.findOne({uuid}) == null) return

		await User.findOne({ uuid }).then(async user => {
			console.log(user.name)
			await ctx.reply(
				ctx.i18n.t('infoPlayer', {
					user,
					clan: (await user.clan.name) !== 'null' ? await user.clan.name : '-',
				}),
				Extra.markup(
					Markup.inlineKeyboard([
						[
							Markup.urlButton(
								'‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
								`https://t.me/${user.username}`
							),
						],
						[Markup.callbackButton('‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å', `info_attack_${user.uuid}`)],
					])
				).HTML()
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –ò–Ω—Ñ–∞ [ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ]
bot.hears(new RegExp('–∏–Ω—Ñ–∞', 'i'), async ctx => {
	try {
		const uuid = await String(ctx.from.id) // ID user
		const uuidPlayer = await ctx.message.reply_to_message.from.id // ID user
		const userName = await ctx.message.reply_to_message.from.username

  if (await User.findOne({uuid}) == null) return
		
		await User.findOne({ uuid: uuidPlayer }).then(async user => {
			await ctx.reply(
				ctx.i18n.t('infoPlayer', {
					user,
					clan: (await user.clan.name) !== 'null' ? await user.clan.name : '-',
				}),
				Extra.markup(
					Markup.inlineKeyboard([
						[
							Markup.urlButton(
								'‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
								`https://t.me/${userName}`
							),
						],
						[
							Markup.callbackButton(
								'‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å',
								`info_attack_${uuidPlayer}`
							),
						],
					])
				).HTML()
			)
		})
	} catch (e) {
		console.error(e)
	}
})

// –î–∞—Ç—å —Å [ —á–∏—Å–ª–æ ] –ø–æ [ —á–∏—Å–ª–æ ] [ —Å–¥–µ–ª–∞—Ç—å 5-—è—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ ] [ –≤—ã–±–æ—Ä: –∫–∞—Ä—Ç—ã, —Å–∞–º–æ—Ü–≤–µ—Ç—ã, –±–º, —Ö–ø, –∫—Ä–∏–æ ] + [ –∫–æ–ª-–≤–æ ]
bot.hears(/\–¥–∞—Ç—å(.+)/i, async ctx => {
	try {
		if (ctx.from.id != 257083558) return
		let from = ctx.message.text
			.split('–ø–æ')[0]
			.replace(/–¥–∞—Ç—å —Å/i, '')
			.trim()
		let to = ctx.message.text.split('–ø–æ')[1].substring(0, 4).trim()
		let count = ctx.message.text.split('+')[1].trim()
		let res = ''

  if (await User.findOne({uuid}) == null) return

		if (ctx.message.text.indexOf('–∫–∞—Ä—Ç—ã') != -1) {
			res = { 'resources.recrute': +count }
			console.log(from, to, count, 1)
		}

		if (ctx.message.text.indexOf('—Å–∞–º–æ—Ü–≤–µ—Ç—ã') != -1) {
			res = { 'resources.gems': +count }
			console.log(from, to, count, 2)
		}

		if (ctx.message.text.indexOf('–±–º') != -1) {
			res = { 'stats.bm': +count }
			console.log(from, to, count, 3)
		}

		if (ctx.message.text.indexOf('—Ö–ø') != -1) {
			res = { 'stats.hp': +count }
			console.log(from, to, count, 4)
		}

		if (ctx.message.text.indexOf('–∫—Ä–∏–æ') != -1) {
			res = { 'resources.crio': +count }
			console.log(from, to, count, 5)
		}

		User.updateMany(
			{ 'placeEvents.recruteChar': { $gte: +from, $lte: +to } },
			{ $inc: res }
		).then(res => console.log(res))
	} catch (e) {
		console.error(e)
	}
})

module.exports = bot
